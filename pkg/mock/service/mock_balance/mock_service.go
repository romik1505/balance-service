// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/balance/balance.go

// Package mock_balance is a generated GoMock package.
package mock_balance

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mapper "github.com/romik1505/balance-service/internal/mapper"
	store "github.com/romik1505/balance-service/internal/store"
)

// MockIBalanceService is a mock of IBalanceService interface.
type MockIBalanceService struct {
	ctrl     *gomock.Controller
	recorder *MockIBalanceServiceMockRecorder
}

// MockIBalanceServiceMockRecorder is the mock recorder for MockIBalanceService.
type MockIBalanceServiceMockRecorder struct {
	mock *MockIBalanceService
}

// NewMockIBalanceService creates a new mock instance.
func NewMockIBalanceService(ctrl *gomock.Controller) *MockIBalanceService {
	mock := &MockIBalanceService{ctrl: ctrl}
	mock.recorder = &MockIBalanceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBalanceService) EXPECT() *MockIBalanceServiceMockRecorder {
	return m.recorder
}

// GetUserBalance mocks base method.
func (m *MockIBalanceService) GetUserBalance(ctx context.Context, user_id, currencyCode string) (mapper.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, user_id, currencyCode)
	ret0, _ := ret[0].(mapper.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockIBalanceServiceMockRecorder) GetUserBalance(ctx, user_id, currencyCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockIBalanceService)(nil).GetUserBalance), ctx, user_id, currencyCode)
}

// ListTransfers mocks base method.
func (m *MockIBalanceService) ListTransfers(ctx context.Context, filter store.ListTransfersFilter) (mapper.TransfersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransfers", ctx, filter)
	ret0, _ := ret[0].(mapper.TransfersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransfers indicates an expected call of ListTransfers.
func (mr *MockIBalanceServiceMockRecorder) ListTransfers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfers", reflect.TypeOf((*MockIBalanceService)(nil).ListTransfers), ctx, filter)
}

// Transfer mocks base method.
func (m *MockIBalanceService) Transfer(ctx context.Context, req mapper.TransferRequest) (mapper.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, req)
	ret0, _ := ret[0].(mapper.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockIBalanceServiceMockRecorder) Transfer(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockIBalanceService)(nil).Transfer), ctx, req)
}
