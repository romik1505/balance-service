// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/store/store.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/romik1505/balance-service/internal/model"
	store "github.com/romik1505/balance-service/internal/store"
)

// MockIStorage is a mock of IStorage interface.
type MockIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageMockRecorder
}

// MockIStorageMockRecorder is the mock recorder for MockIStorage.
type MockIStorageMockRecorder struct {
	mock *MockIStorage
}

// NewMockIStorage creates a new mock instance.
func NewMockIStorage(ctrl *gomock.Controller) *MockIStorage {
	mock := &MockIStorage{ctrl: ctrl}
	mock.recorder = &MockIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorage) EXPECT() *MockIStorageMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockIStorage) GetBalance(ctx context.Context, userID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIStorageMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIStorage)(nil).GetBalance), ctx, userID)
}

// InsertTransferWithEntryParts mocks base method.
func (m *MockIStorage) InsertTransferWithEntryParts(ctx context.Context, t model.Transfer, parts [2]model.EntryPart) (model.Transfer, [2]model.EntryPart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransferWithEntryParts", ctx, t, parts)
	ret0, _ := ret[0].(model.Transfer)
	ret1, _ := ret[1].([2]model.EntryPart)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InsertTransferWithEntryParts indicates an expected call of InsertTransferWithEntryParts.
func (mr *MockIStorageMockRecorder) InsertTransferWithEntryParts(ctx, t, parts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransferWithEntryParts", reflect.TypeOf((*MockIStorage)(nil).InsertTransferWithEntryParts), ctx, t, parts)
}

// ListTransfers mocks base method.
func (m *MockIStorage) ListTransfers(ctx context.Context, f store.ListTransfersFilter) ([]model.Transfer, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransfers", ctx, f)
	ret0, _ := ret[0].([]model.Transfer)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTransfers indicates an expected call of ListTransfers.
func (mr *MockIStorageMockRecorder) ListTransfers(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfers", reflect.TypeOf((*MockIStorage)(nil).ListTransfers), ctx, f)
}

// MocksqlQuery is a mock of sqlQuery interface.
type MocksqlQuery struct {
	ctrl     *gomock.Controller
	recorder *MocksqlQueryMockRecorder
}

// MocksqlQueryMockRecorder is the mock recorder for MocksqlQuery.
type MocksqlQueryMockRecorder struct {
	mock *MocksqlQuery
}

// NewMocksqlQuery creates a new mock instance.
func NewMocksqlQuery(ctrl *gomock.Controller) *MocksqlQuery {
	mock := &MocksqlQuery{ctrl: ctrl}
	mock.recorder = &MocksqlQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksqlQuery) EXPECT() *MocksqlQueryMockRecorder {
	return m.recorder
}

// ToSql mocks base method.
func (m *MocksqlQuery) ToSql() (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSql")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ToSql indicates an expected call of ToSql.
func (mr *MocksqlQueryMockRecorder) ToSql() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSql", reflect.TypeOf((*MocksqlQuery)(nil).ToSql))
}
